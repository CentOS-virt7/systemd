From a40cb5c2aaa67a66c20b17f18cb30fd7b65154d4 Mon Sep 17 00:00:00 2001
From: Michal Schmidt <mschmidt@redhat.com>
Date: Fri, 2 Dec 2011 10:18:46 +0100
Subject: [PATCH 053/126] add a generator to pull rc-local.service in

rc-local.service acts as an ordering barrier even if its condition is
false, because conditions are evaluated when the service is about to be
started.

To avoid the ordering barrier in a legacy-free system, add a generator
to pull rc-local.service into the transaction only if the script is
executable.

If/when we rewrite SysV compatibility into a generator, this one can become
a part of it.
(cherry picked from commit 156730831730701cada2750e826abbf7b113861f)

Conflicts:

	Makefile.am
---
 Makefile.am                   |   24 ++++++----
 src/rc-local-generator.c      |  107 +++++++++++++++++++++++++++++++++++++++++
 units/fedora/rc-local.service |    4 +-
 units/suse/rc-local.service   |    2 +
 4 files changed, 127 insertions(+), 10 deletions(-)
 create mode 100644 src/rc-local-generator.c

diff --git a/Makefile.am b/Makefile.am
index 4416ab7..4d04db3 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -522,6 +522,8 @@ dist_systemunit_DATA += \
 	units/fedora/prefdm.service \
 	units/fedora/rc-local.service \
 	units/fedora/halt-local.service
+systemgenerator_PROGRAMS += \
+	systemd-rc-local-generator
 endif
 
 if TARGET_MANDRIVA
@@ -529,6 +531,8 @@ dist_systemunit_DATA += \
 	units/mandriva/prefdm.service \
 	units/fedora/rc-local.service \
 	units/fedora/halt-local.service
+systemgenerator_PROGRAMS += \
+	systemd-rc-local-generator
 endif
 
 if TARGET_FRUGALWARE
@@ -540,6 +544,8 @@ if TARGET_SUSE
 dist_systemunit_DATA += \
 	units/suse/rc-local.service \
 	units/suse/halt-local.service
+systemgenerator_PROGRAMS += \
+	systemd-rc-local-generator
 endif
 
 if HAVE_PLYMOUTH
@@ -1256,6 +1262,15 @@ systemd_getty_generator_CFLAGS = \
 systemd_getty_generator_LDADD = \
 	libsystemd-basic.la
 
+systemd_rc_local_generator_SOURCES = \
+	src/rc-local-generator.c
+
+systemd_rc_local_generator_CFLAGS = \
+	$(AM_CFLAGS)
+
+systemd_rc_local_generator_LDADD = \
+	libsystemd-basic.la
+
 systemd_user_sessions_SOURCES = \
 	src/user-sessions.c \
 	src/cgroup-util.c
@@ -1949,9 +1964,6 @@ endif
 
 if TARGET_FEDORA
 	$(MKDIR_P) -m 0755 $(DESTDIR)$(systemunitdir)/final.target.wants
-	( cd $(DESTDIR)$(systemunitdir)/multi-user.target.wants && \
-		rm -f rc-local.service && \
-		$(LN_S) $(systemunitdir)/rc-local.service rc-local.service )
 	( cd $(DESTDIR)$(systemunitdir)/final.target.wants && \
 		rm -f halt-local.service && \
 		$(LN_S) $(systemunitdir)/halt-local.service halt-local.service )
@@ -1966,9 +1978,6 @@ endif
 
 if TARGET_MANDRIVA
 	$(MKDIR_P) -m 0755 $(DESTDIR)$(systemunitdir)/final.target.wants
-	( cd $(DESTDIR)$(systemunitdir)/multi-user.target.wants && \
-		rm -f rc-local.service && \
-		$(LN_S) $(systemunitdir)/rc-local.service rc-local.service )
 	( cd $(DESTDIR)$(systemunitdir)/final.target.wants && \
 		rm -f halt-local.service && \
 		$(LN_S) $(systemunitdir)/halt-local.service halt-local.service )
@@ -1990,9 +1999,6 @@ endif
 
 if TARGET_SUSE
 	$(MKDIR_P) -m 0755 $(DESTDIR)$(systemunitdir)/final.target.wants
-	( cd $(DESTDIR)$(systemunitdir)/multi-user.target.wants && \
-		rm -f rc-local.service && \
-		$(LN_S) $(systemunitdir)/rc-local.service rc-local.service )
 	( cd $(DESTDIR)$(systemunitdir) && \
 		rm -f local.service && \
 		$(LN_S) rc-local.service local.service )
diff --git a/src/rc-local-generator.c b/src/rc-local-generator.c
new file mode 100644
index 0000000..ac6424a
--- /dev/null
+++ b/src/rc-local-generator.c
@@ -0,0 +1,107 @@
+/*-*- Mode: C; c-basic-offset: 8; indent-tabs-mode: nil -*-*/
+
+/***
+  This file is part of systemd.
+
+  Copyright 2010 Lennart Poettering
+  Copyright 2011 Michal Schmidt
+
+  systemd is free software; you can redistribute it and/or modify it
+  under the terms of the GNU General Public License as published by
+  the Free Software Foundation; either version 2 of the License, or
+  (at your option) any later version.
+
+  systemd is distributed in the hope that it will be useful, but
+  WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+  General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with systemd; If not, see <http://www.gnu.org/licenses/>.
+***/
+
+#include <errno.h>
+#include <stdio.h>
+#include <unistd.h>
+
+#include "log.h"
+#include "util.h"
+
+#if defined(TARGET_FEDORA) || defined(TARGET_MANDRIVA) || defined(TARGET_MAGEIA)
+#define SCRIPT_PATH "/etc/rc.d/rc.local"
+#elif defined(TARGET_SUSE)
+#define SCRIPT_PATH "/etc/init.d/boot.local"
+#endif
+
+const char *arg_dest = "/tmp";
+
+static int add_symlink(const char *service) {
+        char *from = NULL, *to = NULL;
+        int r;
+
+        assert(service);
+
+        asprintf(&from, SYSTEM_DATA_UNIT_PATH "/%s", service);
+        asprintf(&to, "%s/multi-user.target.wants/%s", arg_dest, service);
+
+        if (!from || !to) {
+                log_error("Out of memory");
+                r = -ENOMEM;
+                goto finish;
+        }
+
+        mkdir_parents(to, 0755);
+
+        r = symlink(from, to);
+        if (r < 0) {
+                if (errno == EEXIST)
+                        r = 0;
+                else {
+                        log_error("Failed to create symlink from %s to %s: %m", from, to);
+                        r = -errno;
+                }
+        }
+
+finish:
+
+        free(from);
+        free(to);
+
+        return r;
+}
+
+static bool file_is_executable(const char *f) {
+        struct stat st;
+
+        if (stat(f, &st) < 0)
+                return false;
+
+        return S_ISREG(st.st_mode) && (st.st_mode & 0111);
+}
+
+int main(int argc, char *argv[]) {
+
+        int r = EXIT_SUCCESS;
+
+        if (argc > 2) {
+                log_error("This program takes one or no arguments.");
+                return EXIT_FAILURE;
+        }
+
+        log_set_target(LOG_TARGET_SYSLOG_OR_KMSG);
+        log_parse_environment();
+        log_open();
+
+        if (argc > 1)
+                arg_dest = argv[1];
+
+        if (file_is_executable(SCRIPT_PATH)) {
+                log_debug("Automatically adding rc-local.service.");
+
+                if (add_symlink("rc-local.service") < 0)
+                        r = EXIT_FAILURE;
+
+        }
+
+        return r;
+}
diff --git a/units/fedora/rc-local.service b/units/fedora/rc-local.service
index 106b12c..fade90c 100644
--- a/units/fedora/rc-local.service
+++ b/units/fedora/rc-local.service
@@ -5,8 +5,10 @@
 #  the Free Software Foundation; either version 2 of the License, or
 #  (at your option) any later version.
 
+# This unit gets pulled automatically into multi-user.target by
+# systemd-rc-local-generator if /etc/rc.d/rc.local is executable.
 [Unit]
-Description=/etc/rc.local Compatibility
+Description=/etc/rc.d/rc.local Compatibility
 ConditionFileIsExecutable=/etc/rc.d/rc.local
 
 [Service]
diff --git a/units/suse/rc-local.service b/units/suse/rc-local.service
index fe4c007..df9a09b 100644
--- a/units/suse/rc-local.service
+++ b/units/suse/rc-local.service
@@ -5,6 +5,8 @@
 #  the Free Software Foundation; either version 2 of the License, or
 #  (at your option) any later version.
 
+# This unit gets pulled automatically into multi-user.target by
+# systemd-rc-local-generator if /etc/init.d/boot.local is executable.
 [Unit]
 Description=/etc/init.d/boot.local Compatibility
 ConditionFileIsExecutable=/etc/init.d/boot.local
-- 
1.7.7.5

