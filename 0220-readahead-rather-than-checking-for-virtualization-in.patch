From c109a0451f2e83f2aa40b443b37465a60436e80b Mon Sep 17 00:00:00 2001
From: Lennart Poettering <lennart@poettering.net>
Date: Tue, 24 Apr 2012 13:12:29 +0200
Subject: [PATCH] readahead: rather than checking for virtualization in the C
 code, use ConditionVirtualization= in the unit (cherry
 picked from commit
 3b2d5b02ae231f1d3eb0d96eb980155d7797304e)

Conflicts:

	TODO
---
 src/readahead/readahead-collect.c          |   16 +++++++++-------
 src/readahead/readahead-replay.c           |   11 ++++-------
 units/systemd-readahead-collect.service.in |    1 +
 units/systemd-readahead-replay.service.in  |    1 +
 4 files changed, 15 insertions(+), 14 deletions(-)

diff --git a/src/readahead/readahead-collect.c b/src/readahead/readahead-collect.c
index 7e6c243..386537f 100644
--- a/src/readahead/readahead-collect.c
+++ b/src/readahead/readahead-collect.c
@@ -660,11 +660,17 @@ int main(int argc, char *argv[]) {
 
         umask(0022);
 
-        if ((r = parse_argv(argc, argv)) <= 0)
+        r = parse_argv(argc, argv);
+        if (r <= 0)
                 return r < 0 ? EXIT_FAILURE : EXIT_SUCCESS;
 
         root = optind < argc ? argv[optind] : "/";
 
+        /* Skip this step on read-only media. Note that we check the
+         * underlying block device here, not he read-only flag of the
+         * file system on top, since that one is most likely mounted
+         * read-only anyway at boot, even if the underlying block
+         * device is theoretically writable. */
         if (fs_on_read_only(root) > 0) {
                 log_info("Disabling readahead collector due to read-only media.");
                 return 0;
@@ -675,12 +681,8 @@ int main(int argc, char *argv[]) {
                 return 0;
         }
 
-        if (detect_virtualization(NULL) > 0) {
-                log_info("Disabling readahead collector due to execution in virtualized environment.");
-                return 0;
-        }
-
-        if (!(shared = shared_get()))
+        shared = shared_get();
+        if (!shared)
                 return 1;
 
         shared->collect = getpid();
diff --git a/src/readahead/readahead-replay.c b/src/readahead/readahead-replay.c
index 0c739c8..1e18e74 100644
--- a/src/readahead/readahead-replay.c
+++ b/src/readahead/readahead-replay.c
@@ -350,7 +350,8 @@ int main(int argc, char*argv[]) {
 
         umask(0022);
 
-        if ((r = parse_argv(argc, argv)) <= 0)
+        r = parse_argv(argc, argv);
+        if (r <= 0)
                 return r < 0 ? EXIT_FAILURE : EXIT_SUCCESS;
 
         root = optind < argc ? argv[optind] : "/";
@@ -360,12 +361,8 @@ int main(int argc, char*argv[]) {
                 return 0;
         }
 
-        if (detect_virtualization(NULL) > 0) {
-                log_info("Disabling readahead replay due to execution in virtualized environment.");
-                return 0;
-        }
-
-        if (!(shared = shared_get()))
+        shared = shared_get();
+        if (!shared)
                 return 1;
 
         shared->replay = getpid();
diff --git a/units/systemd-readahead-collect.service.in b/units/systemd-readahead-collect.service.in
index 56ba54f..01831b7 100644
--- a/units/systemd-readahead-collect.service.in
+++ b/units/systemd-readahead-collect.service.in
@@ -11,6 +11,7 @@ DefaultDependencies=no
 Wants=systemd-readahead-done.timer
 Conflicts=shutdown.target
 Before=sysinit.target shutdown.target
+ConditionVirtualization=no
 
 [Service]
 Type=notify
diff --git a/units/systemd-readahead-replay.service.in b/units/systemd-readahead-replay.service.in
index 7c82e40..a3b3b96 100644
--- a/units/systemd-readahead-replay.service.in
+++ b/units/systemd-readahead-replay.service.in
@@ -11,6 +11,7 @@ DefaultDependencies=no
 Conflicts=shutdown.target
 Before=sysinit.target shutdown.target
 ConditionPathExists=/.readahead
+ConditionVirtualization=no
 
 [Service]
 Type=notify
